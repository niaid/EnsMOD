BiocManager::install('rjson')
BiocManager::install('edgebundleR')
install.packages('edgebundleR')
library(edgebundleR)
remotes::install_github('garthtarr/edgebundleR')
library(edgebundleR)
library(rjson)
install.packages('rjson')
install.packages("rjson")
library(rjson)
library(edgebundleR)
library(rjson)
library(rjson)
library(rjson)
install.packages("rjson")
install.packages("rjson")
library(rjson)
BiocManager::install('edgebundleR')
BiocManager::install('edgebundleR')
remotes::install_github('garthtarr/edgebundleR')
remotes::install_github('garthtarr/edgebundleR', force=TRUE)
library(edgebundleR)
R version
version
shiny::runApp('SIGNAL/app')
R version
version
remotes::install_github('garthtarr/edgebundleR')
remotes::install_github('garthtarr/edgebundleR', force=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(cluster) # hclust()
library(limma) # plotDensities()
library(ggraph)
library(RColorBrewer)
library(tidyverse)
library(factoextra) # eclust(), fviz_silhouette()
library(stats) # dist(), cor(), as.dist(), cophenetic()
library(gplots)
library(rospca)
input_data <- read.table("./Citrullination Project - Proteome - For Jian.txt", sep = "\t", header = TRUE)
rownames(input_data) <- input_data$Leading.Protein.ID
input_data$Leading.Protein.ID <- NULL
input_data <- data.frame(input_data)
## We can show a few rows of the input data including the header
head(input_data)
input_data <- read.table("./Citrullination Project - Proteome - For Jian.txt", sep = "\t", header = TRUE)
colnames(input_data) <- input_data$Leading.Protein.ID
input_data$Leading.Protein.ID
input_data <- read.table("./Citrullination Project - Proteome - For Jian.txt", sep = "\t", header = TRUE)
rownames(input_data) <- input_data$Leading.Protein.ID
input_data$Leading.Protein.ID <- NULL
input_data <- data.frame(input_data)
## We can show a few rows of the input data including the header
head(input_data)
input_data <- readxl::read_xlsx("./Citrullination Project - Proteome - For Jian.xlsx", header = TRUE)
input_data <- readxl::read_xlsx("./Citrullination Project - Proteome - For Jian.xlsx", skip = 19, header = TRUE)
input_data <- readxl::read_xlsx("./Citrullination Project - Proteome - For Jian.xlsx", skip = 19, header = TRUE)
install.packages('read.xlsx')
library(readxlsx)
library(read.xlsx)
library(open.xlsx)
library(openxlsx)
install.packages('openxlsx')
library(read.xlsx)
library(openxlsx)
input_data <- read.xlsx("./Citrullination Project - Proteome - For Jian.xlsx", skip = 19, header = TRUE)
input_data <- openxlsx::read.xlsx("./Citrullination Project - Proteome - For Jian.xlsx", skip = 19, header = TRUE)
input_data <- openxlsx::read.xlsx("./Citrullination Project - Proteome - For Jian.xlsx", sheet=1, skip = 19, header = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(cluster) # hclust()
library(limma) # plotDensities()
library(ggraph)
library(RColorBrewer)
library(tidyverse)
library(factoextra) # eclust(), fviz_silhouette()
library(stats) # dist(), cor(), as.dist(), cophenetic()
library(gplots)
library(rospca)
input_data <- read_xlsx("./Citrullination Project - Proteome - For Jian.xlsx", skip = 19, col_names = TRUE)
input_data <- readxl::read_xlsx("./Citrullination Project - Proteome - For Jian.xlsx", skip = 19, col_names = TRUE)
head(input_data)
input_data <- readxl::read_xlsx("./Citrullination Project - Proteome - For Jian.xlsx", skip = 19, col_names = TRUE)
rownames(input_data) <- input_data$Leading.Protein.ID
input_data$Leading.Protein.ID <- NULL
input_data <- data.frame(input_data)
## We can show a few rows of the input data including the header
head(input_data)
rownames(input_data) <- input_data$Leading.Protein.ID
input_data$Leading.Protein.ID <- NULL
input_data <- data.frame(input_data)
## We can show a few rows of the input data including the header
head(input_data)
## We can see the dimension of your data table
## nuber of rows - genes/proteins (3341)
## number of columns - samples (20)
dim(input_data)
input_data <- readxl::read_xlsx("./Citrullination Project - Proteome - For Jian.xlsx", skip = 19, col_names = TRUE)
rownames(input_data) <- input_data$Leading.Protein.ID
input_data$Leading.Protein.ID <- NULL
input_data <- data.frame(input_data)
## We can show a few rows of the input data including the header
head(input_data)
dim(input_data)
## Remove any row (genes or proteins) with NAs
input_data_nna <- input_data[complete.cases(input_data), ]
## Show how many rows (genes/proteins) left after removing rows with NAs: 1443
dim(input_data_nna)
## Log normalize the data using rlog()
input_data_nna_log <- log(input_data_nna + 1)
## Show how many rows (genes/proteins) left after removing rows with NAs: 1443
dim(input_data_nna)
dim(input_data)
str(input_data)
input_data <- data.frame(input_data)
input_data <- readxl::read_xlsx("./Citrullination Project - Proteome - For Jian.xlsx", skip = 19, col_names = TRUE)
input_data <- data.frame(input_data)
rownames(input_data) <- input_data$Leading.Protein.ID
input_data$Leading.Protein.ID <- NULL
#input_data <- data.frame(input_data)
str(input_data)
## We can show a few rows of the input data including the header
head(input_data)
## We can see the dimension of your data table
## nuber of rows - genes/proteins (3341)
## number of columns - samples (20)
dim(input_data)
## We can show a few rows of the input data including the header
head(input_data)
## We can see the dimension of your data table
## nuber of rows - genes/proteins (3341)
## number of columns - samples (20)
dim(input_data)
## Remove any row (genes or proteins) with NAs
input_data_nna <- input_data[complete.cases(input_data), ]
## We can see the dimension of your data table
## nuber of rows - genes/proteins (3341)
## number of columns - samples (20)
dim(input_data)
str(input_data)
input_data <- readxl::read_xlsx("./Citrullination Project - Proteome - For Jian.xlsx", skip = 19, col_names = TRUE)
input_data <- data.frame(input_data)
rownames(input_data) <- input_data$Leading.Protein.ID
input_data$Leading.Protein.ID <- NULL
input_data <- as.matrix(input_data)
## We can show a few rows of the input data including the header
head(input_data)
## We can see the dimension of your data table
## nuber of rows - genes/proteins (3341)
## number of columns - samples (20)
dim(input_data)
str(input_data)
str(input_data)
complete.cases(input_data)
input_data_nna <- input_data[complete.cases(input_data), ]
## Show how many rows (genes/proteins) left after removing rows with NAs: 1443
dim(input_data_nna)
input_data_nna <- input_data[complete.cases(input_data), ]
## Show how many rows (genes/proteins) left after removing rows with NAs: 1443
dim(input_data_nna)
str(input_data_nna)
input_data <- readxl::read_xlsx("./Citrullination Project - Proteome - For Jian.xlsx", skip = 19, col_names = TRUE)
typeof(input_data)
input_data <- readxl::read_xlsx("./Citrullination Project - Proteome - For Jian.xlsx", skip = 19, col_names = TRUE)
input_data <- data.frame(input_data)
typeof(input_data)
typeof(as.data.frame(input_data))
## We can show a few rows of the input data including the header
head(input_data)
colnames(input_data)
rownames(input_data)
input_data <- readxl::read_xlsx("./Citrullination Project - Proteome - For Jian.xlsx", skip = 19, col_names = TRUE)
input_data <- data.frame(input_data)
typeof(input_data)
?readxl::read_xlsx()
## To analyze your data, change to your input data file name in the read.table().
## It should be txt file (but we can make it to read in other file formats if needed)
##  Please remove any extra header information, so the header only contain the sample names
## and genes at the start of each row
input_data <- readxl::read_xlsx("./Citrullination Project - Proteome - For Jian.xlsx", skip = 19, col_names = TRUE, col_types="numberic")
input_data <- readxl::read_xlsx("./Citrullination Project - Proteome - For Jian.xlsx", skip = 19, col_names = TRUE, col_types=NULL)
input_data <- data.frame(input_data)
typeof(input_data)
head(input_data)
input_data <- readxl::read_xlsx("./Citrullination Project - Proteome - For Jian.xlsx", skip = 19, col_names = TRUE, col_types=NULL)
input_data <- data.frame(input_data)
typeof(input_data)
input_data <- readxl::read_xlsx("./Citrullination Project - Proteome - For Jian.xlsx", skip = 19, col_names = TRUE, col_types=NULL)
input_data <- data.frame(input_data)
typeof(input_data)
typeof(as.data.frame(input_data))
rownames(input_data) <- input_data$Leading.Protein.ID
input_data$Leading.Protein.ID <- NULL
## We can show a few rows of the input data including the header
head(input_data)
input_data <- as.matrix(input_data)
## We can show a few rows of the input data including the header
head(input_data)
rownames(input_data)
## We can see the dimension of your data table
## nuber of rows - genes/proteins (3341)
## number of columns - samples (20)
dim(input_data)
## We can show a few rows of the input data including the header
head(input_data)
## Remove any row (genes or proteins) with NAs
input_data_nna <- input_data[complete.cases(input_data), ]
## Show how many rows (genes/proteins) left after removing rows with NAs: 1443
dim(input_data_nna)
## We can see the dimension of your data table
## nuber of rows - genes/proteins (3341)
## number of columns - samples (20)
str(input_data)
## We can see the dimension of your data table
## nuber of rows - genes/proteins (3341)
## number of columns - samples (20)
typeof(input_data)
input_data <- readxl::read_xlsx("./Citrullination Project - Proteome - For Jian.xlsx", skip = 19, col_names = TRUE, col_types=NULL)
input_data <- data.frame(input_data)
typeof(input_data)
typeof(as.data.frame(input_data))
rownames(input_data) <- input_data$Leading.Protein.ID
input_data$Leading.Protein.ID <- NULL
input_data <- as.matrix(input_data)
## We can show a few rows of the input data including the header
head(input_data)
## We can see the dimension of your data table
## nuber of rows - genes/proteins (3341)
## number of columns - samples (20)
typeof(input_data)
input_data <- as.matrix(input_data)
## We can see the dimension of your data table
## nuber of rows - genes/proteins (3341)
## number of columns - samples (20)
typeof(input_data)
input_data <- readxl::read_xlsx("./Citrullination Project - Proteome - For Jian.xlsx", skip = 19, col_names = TRUE, col_types=NULL)
input_data <- data.frame(input_data)
typeof(input_data)
typeof(as.data.frame(input_data))
rownames(input_data) <- input_data$Leading.Protein.ID
input_data$Leading.Protein.ID <- NULL
## We can show a few rows of the input data including the header
head(input_data)
## We can see the dimension of your data table
## nuber of rows - genes/proteins (3341)
## number of columns - samples (20)
str(input_data)
input_data <- data.matrix(input_data)
head(input_data)
## We can see the dimension of your data table
## nuber of rows - genes/proteins (3341)
## number of columns - samples (20)
str(input_data)
## We can show a few rows of the input data including the header
head(input_data)
## Remove any row (genes or proteins) with NAs
input_data_nna <- input_data[complete.cases(input_data), ]
## Show how many rows (genes/proteins) left after removing rows with NAs: 1443
dim(input_data_nna)
## We can see the dimension of your data table
## nuber of rows - genes/proteins (3341)
## number of columns - samples (20)
str(input_data)
## We can show a few rows of the input data including the header
head(input_data)
input_data_nna <- input_data[complete.cases(input_data), ]
## Show how many rows (genes/proteins) left after removing rows with NAs: 1443
dim(input_data_nna)
## We can show a few rows of the input data including the header
tail(input_data)
## We can show a few rows of the input data including the header
dim(input_data)
## We can see the dimension of your data table
## nuber of rows - genes/proteins (3341)
## number of columns - samples (20)
View(input_data)
input_data <- readxl::read_xlsx("./Citrullination Project - Proteome - For Jian.xlsx", skip = 19, col_names = TRUE, col_types=NULL)
input_data <- data.frame(input_data)
typeof(input_data)
typeof(as.data.frame(input_data))
rownames(input_data) <- input_data$Leading.Protein.ID
input_data$Leading.Protein.ID <- NULL
## We can see the dimension of your data table
## nuber of rows - genes/proteins (3341)
## number of columns - samples (20)
View(input_data)
## Remove any row (genes or proteins) with NAs
input_data_nna <- input_data[complete.cases(input_data), ]
## Show how many rows (genes/proteins) left after removing rows with NAs: 1443
dim(input_data_nna)
## Show how many rows (genes/proteins) left after removing rows with NAs: 1443
dim(input_data_nna)
## We can show a few rows of the input data including the header
str(input_data)
input_data <- as.data.frame(sapply(input_data, as.numeric))
## We can show a few rows of the input data including the header
str(input_data)
input_data <- readxl::read_xlsx("./Citrullination Project - Proteome - For Jian.xlsx", skip = 19, col_names = TRUE, col_types=NULL)
input_data <- data.frame(input_data)
typeof(input_data)
typeof(as.data.frame(input_data))
rownames(input_data) <- input_data$Leading.Protein.ID
input_data$Leading.Protein.ID <- NULL
input_data <- as.data.frame(sapply(input_data, as.numeric))
## We can show a few rows of the input data including the header
head(input_data)
## We can see the dimension of your data table
## nuber of rows - genes/proteins (3341)
## number of columns - samples (20)
dim(input_data)
## Remove any row (genes or proteins) with NAs
input_data_nna <- input_data[complete.cases(input_data), ]
## Show how many rows (genes/proteins) left after removing rows with NAs: 1443
dim(input_data_nna)
at the start of each row
library(DESeq2)
library(DESeq2)
## To analyze your data, change to your input data file name in the read.table(). It should be txt file (but we can make it to read in other file formats if needed)
##  Please remove any extra header information, so the header only contain the sample names and genes at the start of each row
input_data <- read.table("./Citrullination Project - Proteome - For Jian.txt", sep = "\t", header = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(cluster) # hclust()
library(limma) # plotDensities()
library(ggraph)
library(RColorBrewer)
library(tidyverse)
library(factoextra) # eclust(), fviz_silhouette()
library(stats) # dist(), cor(), as.dist(), cophenetic()
library(gplots)
library(rospca)
## Perform Robust PCA
resR0 <- robpca(input_data_nna_log_t, k=0, ndir='all', skew=FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(chromVAR)
library(chromVARmotifs)
install.packages("chromVARmotifs")
knitr::opts_chunk$set(echo = TRUE)
library(chromVAR)
library(chromVARmotifs)
install.packages("chromVARmotifs")
BiocManager::install("chromVARmotifs")
View(IPA_BG_SYK24h_9_common_with_annotation)
# Readin all smooth trace files in the FinalData folder
#  ~/FinalData<br>
# Smooth_Trace_1.csv
# Smooth_Trace_2.csv
# Smooth_Trace_3.csv
# Smooth_Trace_4.csv
# Smooth_Trace_6.csv
# Smooth_Trace_7.csv
# Smooth_Trace_8.csv
Smooth_trace_files <- list.files(".", pattern="Smooth_Trace_", all.files=FALSE, full.names=FALSE)
# Transpose the data and save into files
for (i in 1:length(Smooth_trace_files)){
traces <- read.csv(Smooth_trace_files[i])
traces_t <- as.data.frame(t(traces))
traces_t$X <- NULL
outputFile <- paste0("Transposed_", Smooth_trace_files[i])
write.table(traces_t, file=outputFile, sep=",",  col.names=FALSE)
}
# Call to run the perlscript 'Find_peak_and_time2activation_for_cells_new.pl'
# This Perl script will be called to classify each cell as either responder or non-responder
cmd <- "perl ./Find_peak_and_time2activation_for_cells_new.pl"
system(cmd)
peaks01 <- read.delim("Peak_and_time_delay_to_activation_01.txt", header = FALSE)
names(peaks01) <- c("Cell_ID", "Condition", "NCratio", "Time_to_Activation", "Responses");
head(peaks01)
# Plot the peak value and time-to-activation for each cell by condition
# Generate beeswarm plot
# set the order of the samples
LEVs = c("JN55PD1..J-SQL..0.1uM","JN55PD1..J-PDL1-SQL..0.1uM","JN55PD1..J-SQL..1uM","JN55PD1..J-PDL1-SQL..1uM","JN55PD1..J-SQL..10uM","JN55PD1..J-PDL1-SQL..10uM","JN55PD1..J-SQL..100uM","JN55PD1..J-PDL1-SQL..100uM")
LEVs
library(ggplot2)
library(dplyr)
library(tidyr)
library(Seurat)
library(gridExtra)
knitr::opts_chunk$set(echo = TRUE)
ADT_biomarker_77_unique_genes
ADT_biomarker_77_unique_genes
ADT_biomarker_genes <- read.table("./EJ101_CITEseq_ADT_genes.txt", header = TRUE)
ADT_biomarker_77_unique_genes <- unique(unlist(ADT_biomarker_genes[2]))
ADT_biomarker_77_unique_genes
# Load in the alveolar macrophage subcluster based on RNA/cDNA data
AMacs_seu_res08 <- readRDS("./AMacs_seu_res08.Rds")
# The total number of alveolar macrophages: 32285
# Get the ADT data for alveolar macrophages
AMacs_seu_res08_umi <- rownames(AMacs_seu_res08@meta.data)
CITE_seu_ADT_singlet_AMacs <- subset(CITE_seu_ADT_singlet, cells = AMacs_seu_res08_umi)
# Load in the ADT-based clusters
CITE_seu_ADT_singlet <- readRDS("./CITE_seu_ADT_singlet_with_cellTypes1.rds")
# a total of 37944 singlets
DimPlot(object = CITE_seu_ADT_singlet, reduction = "adt.umap", label = TRUE)
# The 79 cell surface markers including regular biomarkers, ctrls and an 'unmapped'???
ADT_markers_79 <- rownames(CITE_seu_ADT_singlet@assays$ADT@counts)
ADT_markers_79
# There are a total of 77 unique genes that correspond to the ADT biomarker
ADT_biomarker_genes <- read.table("./EJ101_CITEseq_ADT_genes.txt", header = TRUE)
ADT_biomarker_77_unique_genes <- unique(unlist(ADT_biomarker_genes[2]))
ADT_biomarker_77_unique_genes
# Load in the alveolar macrophage subcluster based on RNA/cDNA data
AMacs_seu_res08 <- readRDS("./AMacs_seu_res08.Rds")
# The total number of alveolar macrophages: 32285
# Get the ADT data for alveolar macrophages
AMacs_seu_res08_umi <- rownames(AMacs_seu_res08@meta.data)
CITE_seu_ADT_singlet_AMacs <- subset(CITE_seu_ADT_singlet, cells = AMacs_seu_res08_umi)
# Add the ADT data as a new data slot ('ADT' assay) into the Seurat object already having the RNA data
AMacs_seu_res08[["ADT"]] <- CITE_seu_ADT_singlet_AMacs[["ADT"]]
# UMAP based on RNA data
DimPlot(object = AMacs_seu_res08, reduction = "umap", label = TRUE)
DoHeatmap(AMacs_seu_res08, assay='RNA', slot='scale.data', features = ADT_biomarker_77_unique_genes, disp.max = 3, size = 5, angle = 90)
ADT_biomarker_77_unique_genes
ADT_markers_79
ADT_biomarker_77_unique_genes
unlist(ADT_biomarker_genes[2])
unique(unlist(ADT_biomarker_genes[2]))
ADT_biomarker_77_unique_genes <- unique(unlist(ADT_biomarker_genes[2]))
ADT_biomarker_77_unique_genes
FeaturePlot(AMacs_seu_res08, features = "SiglecF", reduction = "umap", cols = c("lightgrey", "darkblue"), ncol = 2)
DefaultAssay(AMacs_seu_res08) <- 'ADT'
FeaturePlot(AMacs_seu_res08, features = "SiglecF", reduction = "umap", cols = c("lightgrey", "darkblue"), ncol = 2)
DefaultAssay(AMacs_seu_res08) <- 'RNA'
FeaturePlot(AMacs_seu_res08, features = "Siglecf", reduction = "umap", cols = c("lightgrey", "darkblue"), ncol = 2)
DoHeatmap(AMacs_seu_res08, assay='RNA', slot='scale.data', features = c('Siglecf', 'Ms4a1', 'Fcgr3', 'H2'), disp.max = 3, size = 5, angle = 90)
DoHeatmap(AMacs_seu_res08, assay='RNA', slot='data', features = c('Siglecf', 'Ms4a1', 'Fcgr3', 'H2'), disp.max = 3, size = 5, angle = 90)
AMacs_seu_res08@assays$RNA@
DoHeatmap(AMacs_seu_res08, assay='RNA', slot='counts', features = c('Siglecf', 'Ms4a1', 'Fcgr3', 'H2'), disp.max = 3, size = 5, angle = 90)
AMacs_seu_res08@assays$RNA@
DoHeatmap(AMacs_seu_res08, assay='RNA', slot='counts', features = c('Siglecf', 'Ms4a1', 'Fcgr3', 'H2'), disp.max = 3, size = 5, angle = 90)
DoHeatmap(AMacs_seu_res08, assay='RNA', slot='data', features = c('Siglecf', 'Ms4a1', 'Fcgr3', 'H2'), disp.max = 3, size = 5, angle = 90)
AMacs_seu_res08@assays$RNA@
DoHeatmap(AMacs_seu_res08, assay='RNA', slot='counts', features = c('Siglecf', 'Ms4a1', 'Fcgr3', 'H2'), disp.max = 3, size = 5, angle = 90)
dim(AMacs_seu_res08@assays$RNA@data)
dim(AMacs_seu_res08@assays$RNA@scale.data)
dim(AMacs_seu_res08@assays$RNA@counts)
dim(AMacs_seu_res08@assays$RNA@data)
dim(AMacs_seu_res08@assays$RNA@scale.data)
DoHeatmap(AMacs_seu_res08, assay='RNA', slot='data', features = ADT_biomarker_77_unique_genes, disp.max = 3, size = 5, angle = 90)
ADT_markers_79
knitr::opts_chunk$set(echo = TRUE)
C2_trace1 <- read.csv("./CSV-C2-AUP/FinalData/Smooth_Trace_1.csv", header = TRUE, row.names = TRUE)
C2_trace1 <- read.csv("./CSV-C2-AUP/FinalData/Smooth_Trace_1.csv", header = TRUE)
head(C2_trace1)
?read.csv()
C4_trace1 <- read.csv("./CSV-C4-AUP/FinalData/Smooth_Trace_1.csv", header = TRUE)
C4_trace1$X <- NULL
head(C2_trace1)
head(C4_trace1)
C2_trace1 <- read.csv("./CSV-C2-AUP/FinalData/Smooth_Trace_1.csv", header = TRUE)
C2_trace1$X <- NULL
head(C2_trace1)
C4_trace1 <- read.csv("./CSV-C4-AUP/FinalData/Smooth_Trace_1.csv", header = TRUE)
C4_trace1$X <- NULL
head(C4_trace1)
numberOfFrames <- read.table("./CSV-C2-AUP/FinalData/BG_and_Total_frames.txt")
numberOfFrames
for (i in colnames(C2_trace1)){
print(C2_trace1[[i]])
}
for (i in colnames(C2_trace1)){
colnames(C2_trace1[[i]])
}
for (i in colnames(C2_trace1)){
print(colnames(C2_trace1[[i]]))
}
for (i in colnames(C2_trace1)){
#print(colnames(C2_trace1[[i]]))
print(i)
}
tmp <- cor(C2_trace1[["X1000007281"]], C4_trace1[["X1000007281"]])
tmp
tmp <- cor(C2_trace1[["X1000007281"]], C4_trace1[["X1000007281"]], method = c("pearson", "kendall", "spearman"))
tmp
tmp <- cor(C2_trace1[["X1000007281"]], C4_trace1[["X1000007281"]], method = "pearson")
tmp
tmp <- cor(C2_trace1[["X1000007281"]], C4_trace1[["X1000007281"]], method = kendall)
tmp <- cor(C2_trace1[["X1000007281"]], C4_trace1[["X1000007281"]], method = "kendall")
tmp
View(IPA_BG_SYK24h_9_common_with_annotation)
knitr::opts_chunk$set(echo = TRUE)
C2_trace1 <- read.csv("./CSV-C2-AUP/FinalData/Smooth_Trace_1.csv", header = TRUE)
C2_trace1$X <- NULL
head(C2_trace1)
C4_trace1 <- read.csv("./CSV-C4-AUP/FinalData/Smooth_Trace_1.csv", header = TRUE)
C4_trace1$X <- NULL
head(C4_trace1)
for (i in colnames(C2_trace1)){
tmp <- cor(C2_trace1[["X1000007281"]], C4_trace1[["X1000007281"]], method = "kendall")
tmp
}
numberOfFrames <- read.table("./CSV-C2-AUP/FinalData/BG_and_Total_frames.txt")
BG_frames_num <- numberOfFrames$V1
Total_frames_num <- numberOfFrames$V2
#cor() computes the correlation coefficient
#cor(x, y, method = c("pearson", "kendall", "spearman"))
#cor.test() test for association/correlation between paired samples.
#It returns both the correlation coefficient and the significance level(or p-value) of the correlation .
#cor.test(x, y, method=c("pearson", "kendall", "spearman"))
Total_frames_num
tmp <- cor(C2_trace1[["X1000007281"]], C4_trace1[["X1000007281"]], method = "kendall")
tmp
?cor()
shiny::runApp('EnsMOD/app')
runApp('EnsMOD/app')
runApp('EnsMOD/app')
runApp('EnsMOD/app')
runApp('SIGNAL/app')
runApp('SIGNAL/app')
runApp('EnsMOD/app')
runApp('EnsMOD/app')
shiny::runApp('EnsMOD/app')
setwd("~/EnsMOD/app")
runApp()
